
结构体的定义语法：		――  定义一个 “数据类型”（ 地位上与 int 、string、bool。。。等同的 ）

	成员变量不能指定初值。

	成员变量不能使用 var 修饰

        		type Person struct {
			name string
			sex byte
			age int
        		}

结构体的变量的定义和 初始化。

	1. 顺序初始化： 所有成员必须依次全部初始化。

		var p1 Person = Person{"name", 'm', 18}

	2. 指定成员初始化： 借助成员变量名，指定某几个成员的值。未指定的值为数据类型默认值。

		var p2 Person = Person{name:"zhangsan", age:18}

	索引成员变量的方法： 使用“.”

		p2.sex = 'f'
		p2.age = 111

	结构体变量地址 == 结构体首元素地址。

结构体比较、赋值

	比较：结构体比较，可以使用 ==  != , 不能使用 > >= < <= 

	赋值：相同类型的结构体（成员变量的类型、个数、顺序完全一致）变量之间，可以直接赋值。

			主要用于 函数调用期间 传参。    实参 ――> 形参。

结构体传参：

	值传递。―― 实参 将自己的值拷贝给 形参。【一般不用】

		通常不用！！！ 过度消耗系统内存资源。	

	unsafe.Sizeof(变量名)	 ―― 求取此种变量所占用的内存空间大小。

结构体指针变量的定义和 初始化。

	1. 顺序初始化： 所有成员必须依次全部初始化。

		var p1 *Person = &Person{"name", 'm', 18}

	2. 指定成员初始化： 借助成员变量名，指定某几个成员的值。未指定的值为数据类型默认值。

		var p2 *Person = &Person{name:"zhangsan", age:18}

	3. new() 函数初始化指针：

		P3 := new(Person) 

	索引成员变量的方法： 使用“.” 【与普通变量方法一致】

		P3.sex = 'f'
		P3.age = 111

	指针变量的值(地址) == 结构体首元素的地址	

结构体指针传参：

	指针大小，与指针的数据类型无关！！！ var p *int/*string/*bool/*byte/*结构体  ―――> 8字节（64位操作系统）4字节（32位操作系统）

	参数： 传 地址值（传引用）【经常使用】

	返回值： 传 地址值（传引用） 【经常使用】

	             不能返回 局部变量的地址值。（随着栈帧的释放而变得无意义。）可以返回 heap空间上的地址。

		上述特性。在Go语言中可以忽略。―― 涉及内容“内存逃逸”

练习： 	封装一个有 string、bool、int、[]string 类型的结构体 Person。

	main函数中声明结构体变量，调用 initPerson 函数完成结构体赋值，并在 main 中查看赋值结果。	

字符串操作函数：

	Contains： 

		判断字符串中是否包含子串。 返回值 ： true、false

		strings.Contains("hello", "lloi")		――> false
	Join: 

		将[]string 切片中的元素，按照指定连接符，拼接成一个完整string，返回

		str := []string {"hello", "go", "haha", "xixi", "hoho"}
		retStr := strings.Join(str, "%")		――> hello%go%haha%xixi%hoho

	Trim：
		去除字符串 头、尾指定字符。常用来去空格。

		strings.Trim("hello", "o")		――> hell

	Replace:   将字符串中，指定子串替换为 指定新子串。 指定替换次数。  -1 表全部。

		data := "a man a plan a canal panama a"
		resStr := strings.Replace(data, "a", "abc", 1)	――> "abc man a plan a canal panama a"

	Split: 
		按指定“分隔符”对字符串进行分割。 返回 []string

		str := "I love my work and I love my family too"

		ret := strings.Split(str, "I ")			――> love my work and	love my family too

	Fields:
		按“空格”对字符串进行分割。 返回 []string	

		str := "I love my work and I love my family too"

		retStr := strings.Fields(str)	

	HasSuffix：

		判断某字符串是否已“xxx”结尾

		strings.HasSuffix("word cup.png", ".jpg")	――> false

	HasPrefix:
		判断某字符串是否已“xxx”开头

		strings.HasPrefix("word cup.png", "worl") ――> false


创建、打开、关闭文件：

	Create函数： 	

		创建一个空文件。如果文件存在，直接将原文清空。 如果文件不存在创建一个新文件。

		参数：创建文件的路径：

			相对路径：	相对于当前可执行文件。

			绝对路径：	从 指定盘符起始的目录位置。
	Open函数：

		根据指定目录（相对、绝对）位置，打开文件，如果文件存在，成功打开，不存在，失败！！

		打开的文件，只能读。 不能执行写操作。

	OpenFile函数：――  打开已经存在的文件， 执行写入操作，选择。

		以指定的读写模式打开、创建文件。

		func OpenFile(name string, flag int, perm FileMode) (*File, error) 

			参1： 打开、创建文件的路径。 （相对、绝对）

			参2： 打开文件的模式： O_RDONLY、O_WRONLY、O_RDWR   |  O_CREATE （当有此参数，必须指定 参数3）

			参3： 文件访问权限。 r：4   w：2    x：1		0 -- 7

				要求使用 8 进制。―― 0644 ――> rw-r--r--


写文件：
	1. 按字符串写：

		f.WriteString("写入的内容")

			返回实际写出的字节数。

		windows： 回车、换行。 	\r\n

		Linux: 回车、换行。  \n

	2. 指定位置写入：

		1）Seek():  获取文件读写位置。

		func (f *File) Seek(offset int64, whence int) (ret int64, err error) 

			offset： 矢量。 正数，向文件末尾偏移。负数，向文件开头偏移

			whence： 偏移的起始位置。

				io.SeekStart : 文件起始位置。

				io.SeekCurrent : 文件当前位置。	

				io.SeekEnd: 文件末尾位置。

			返回值 ret： 从文件起始位置到，读写位置的偏移量。						

		2）WriteAt()： 在指定位置写入数据。， 通常搭配 Seek()用

		func (f *File) WriteAt(b []byte, off int64) (n int, err error)

			b： 待写入的数据内容

			off：写入的位置。（通常是 Seek函数的 返回值）	
读文件：
	按行读。----- 处理文本文件。

		1） 获取一个 reader（自带缓冲区）

			func NewReader(rd io.Reader) *Reader 

				rd: 成功打开的文件指针。 f

				返回值：Reader （阅读器，自带缓冲区）

		2）从 reader 的缓冲区中获取 指定数据 ReadBytes( '\n' )

			func (b *Reader) ReadBytes(delim byte) ([]byte, error)

				delim ：读取数据的拆分依据。

				返回值：成功获取到的数据内容。

		通常，会使用 for 来循环调用  ReadBytes， 一直读到 err == io.EOF 的时候，结束信息。代表文件读取完毕。

		缓冲区：	《计算机硬件及组成原理》 ―― 机械工业出版社

按字节写--按字节读： ---- 按字节处理文件。既可以处理文本也可以处理二进制文件（.jpg/mp3/avi....）

	func (file *File) Read(b []byte) (n int, err Error)

		b： 用来存储读到的数据的 缓冲区。

		返回n：实际读到的 字节数。

	func (file *File) Write(b []byte) (n int, err Error)

		b： 存储数据的缓冲区，其中的数据即将被写入文件。。

		返回n：实际写出的 字节数。

大文件拷贝实现：

	1.  只读打开文件 os.Open --> fr		defer  close（）

	2.  创建新文件 os.Create --> fw		defer  close（）

	3.  for 循环安字节读取 fr 中的所有数据， 存入 buf

	4.  读多少，写多少，将buf 中数据写入 fw

	5.  判断 err == io.EOF 来确认读到文件末尾。

读目录：
	1） 打开目录  OpenFile

		func OpenFile(name string, flag int, perm FileMode) (*File, error) 

			 flag： 只能指定 O_RDONLY

			perm ： os.ModeDir		---> 操作目录文件

			返回： 操作目录文件的 指针	

	2） 读取目录项  Readdir

		func (f *File) Readdir(n int) ([]FileInfo, error)

			n：读取目录项的个数。 -1 表全部

			返回值：每一个目录项 描述信息的（FileInfo） 切片

       type FileInfo interface {
		Name() string       // base name of the file
		Size() int64        // length in bytes for regular files; system-dependent for others
		。。。
		IsDir() bool        // abbreviation for Mode().IsDir()
		。。。
      }			

			




















		

	
	

			






















	

			

	
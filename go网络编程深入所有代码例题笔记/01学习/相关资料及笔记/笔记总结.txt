
指针：
	就是地址（虚拟内存地址）。

	指针变量：存放地址的变量。

	*p： 解引用、间接引用。

指针使用注意：

	空指针：
		未被初始化的指针变量。

	野指针：
		使用无效的内存地址初始化的指针变量。  0 、 非0

new ：
	开辟 一块新的内存空间 ，使用该空间的首地址。初始化指针。

	p  := new(int)  ―― int 0 、 bool  false、 string “”

	左值：
		在 “=” 左边的变量。指代变量所描述的 内存空间。

	右值：
		在 “=” 右边的变量。指代变量所描述的 内存空间中的数据值。

栈帧：
	开辟在 stack 上的一块连续区域。由函数调用时产生，随着函数调用结束释放（消失）。

	作用： 给函数调用提供内存空间。

		1. 局部变量	2. 形式参数（与局部变量地位等同）     3. 临时值 （了解）

传参：
	传值：将实参对应的变量值，拷贝给形参。

	传址（传引用）：将实参对应的变量值（地址值）， 拷贝给形参。

		作用： 在 A 栈帧空间上，修改 B 栈帧空间的内容。

================================

为什么要使用切片：

	1.  数组长度固定， 不能支持动态扩容。

	2.  传参时，数组采用值传递。

	Go语言中，几乎可以在所有场景下，使用切片代替 数组。

切片的本质：

	不是指向数组的指针，是一种新定义的数据结构。 包含 指向数组地址的成员、长度、容量。	runtime/slice.go	

		type slice struct {
			*Pointer	
			len
			cap
		}
切片的使用：

	数组、切片使用区别：

		数组：[ ] 指定数组长度。或者 ... 

		切片：[ ] 为空

	使用规则：
		slice[ low : high : max ]

		low: 起始坐标位置 （包含）

		high：终止坐标位置  （不包含）		len = high - low

		容量： cap = max - low

		slice[:high]  : 从 0  到  high

		slice[low : high] 	从 low  到  high

		slice[low : ] 	从 low 到 结尾

	1. 从已知数组/切片 截取

		1） 如果没有指定max：max的值为截取对象（数组、切片）的容量

		2） 如果指定max：max 值不能超过原对象（数组、切片）的容量。

		利用数组创建切片，切片操作的是同一个底层数组。

	2. 创建切片：

		1.  数组方式创建 切片

			var s1 = []int {1, 2, 5, 6}	len = 4, cap= 4

		2. make 创建 指定len、cap

			s2 ：= make ([]string, 5, 10）  len = 5, cap = 10   切片初始值为，数据类型默认值。

		3. make 创建 指定len 不指定 cap， cap跟随len  【常用！！！】

			s3 := make([]bool, 7)   	len == cap == 7  切片初始值为，数据类型默认值


		make 只能用来创建 ：  slice、map、channel

切片操作函数： 

	append函数：

		向切片末尾，追加元素。 自动扩容。 默认1024 以下，以 2 倍方式扩容。

	copy函数：
		直接在原切片上对应位置，操作。

		copy ( dst（目标）， src (原数据））

切片做函数参数：  

	传值！！！	――切片本质：	 type slice struct { 指针， len， cap } 

	切片 做函数参数，传值操作。

		在函数内，如果直接操作原切片。―― 可以操作。原因：type slice struct { 指针， len， cap } 

		在函数内， append 追加元素到切片中。 有可能导致切片自动扩容。产生新的切片内存空间。 ―― 不操作原切片。

	总结：切片做函数参数， 修改切片内容、append，通过 “返回值”将修改返回给调用者。

		
====================	

map： 映射、字典

	key -- value 组成的  映射对集合。

	key值: 	不能是 切片、结构体、指针。。。 含有引用语义的数据类型。

		唯一。无序。

		使用的时候，直接取 key 获得 value


创建和赋值：

	1. var m1 = map[int]string{1:"red", 5022:"black", 502:"yellow"}

		要求初始化时，key值不重复。

	2. var m2 = map[int]string{}

		存储数据时，map 会自动扩容。 

		key 与已有key 重复，会直接覆盖原有key -- value

	3.  m3 := make(map[int]string,10)

		通过make创建， 表指定初始容量 。 map 中不能使用 cap， len（）求取的 实际存储的元素个数。

	4. m4 := make(map[int]string)		【常用！！！】

		通过make创建， 初始容量为0 。 可以自动扩容。


遍历 map：

	1.  for  k, v := range myMap {

	2.  for  _, v := range myMap {  忽略 key 值，取 value

	3.  for  k, _ := range myMap {  忽略 value 值，取 key

	4. for  data := range myMap {	 忽略 value 值， 取 key 值。


判断 map 中的key是否存在：

	语法：

	if data, has := myMap[k];  !has {

	}

	%q：以Go语言的语法格式，显示字符串。 “”

	myMap[k] : 表示取  myMap中 key 值为 “k”的元素。

		1. 如果 该元素存在。将 k 所对应的 value 保存在 data 中。 同时，将 has 置为 true。
	
		2. 如果 该元素不存在。将 has 置为 false

map 的删除：

	delete（map名， key）

map 传参、返回值：

	map 作为函数参数、返回值时，采用 传引用！！！





	
























	
		

		
	


协议：数据通信过程中的规则。

OSI 7层：物、数、网、传、会、表、应

TCP/IP 4层：链、网、传、应


链路层的作用：

	获取 mac 地址。（不需要用户指定）	ARP协议： 借助 IP ――> mac

网络层的作用：

	设置目的IP地址。（需要用户指定）	IP协议。	IP地址：大小：4字节。	192.168.11.123：“点分十进制”表示法

	一个IP地址，可以在网络环境中，唯一的标识一台主机（一个终端设备）。

传输层的作用：

	设置目的 port 端口号。（需要用户指定）	TCP/UDP协议。	port 的大小：0-65535	

						5000 以下的port尽量不要使用。 常用的端口不要重复使用	8080 端口	
	在一台主机中唯一标识一个 进程。

应用层的作用：
	
	不是必须的。

	指定数据封装、解封的格式。


套接字：
	捆绑 IP地址+port。 能在网络环境中唯一标识 一个进程。

	数据通信过程中，要求成对出现。	―― 参考：channel

	双向全双工（同一时刻，数据既可以在socket上写，也能读。）

网络通信模型结构

c/s 模型：
	优点：	
		1. 缓存大量数据，提高应用程序的运行速度。	2. 客户端、服务器端同一团队设计。协议选择灵活。

	缺点：	
		1. 较 bs模型而言，开发、调试工作量大。		2. 要在主机上安装应用，对用户安全构成隐患。

		3. 跨平台能力较弱。
b/s 模型:
	优点：	
		1. 开发、调试工作量小。		2. 不要在主机上安装应用，不会对用户安全构成隐患。

		3. 跨平台性较好
	缺点：
		1. 不能缓存大量数据，应用程序运行速度受网络环境限制。	

		2. 协议选择不灵活。

		3. 网络应用扩展受限。

TCP C/S模型架构：

	服务器端：

		1. net.Listen()	―― 创建用于监听的 套接字 （不是用来监听客户端连接请求。）

		2. Accept()	―― 阻塞  监听客户端连接。成功连接 ―― 返回一个用于通信的 套接字。

		3. Read()	

		4. 处理客户端发送的数据

		5. write()

		6. close()

	客户端：

		1. net.Dail()	―― 创建用于通信的 套接字。（借助 IP+port【服务器的IP、port】）

		2.  write()

		3. Read()

		4.  close()

添加 netcat工具模拟客户端：

	1. 解压 netcat-win32-1.12.zip 文件 到指定目录

	2. 解压后，拷贝  nc.exe 或 nc64.exe 所在目录，保存到环境变量： 

		方法：我的电脑-->属性-->高级系统设置-->环境变量-->系统变量中找“path”-->双击它-->新建-->粘贴

	3. 启动 cmd 执行 nc 命令 充当客户端测试

	4. nc 127.0.01 7020 （注意 IP 和 端口之间是“空格”）

	5. 输入 hello socket。 服务器应该能读到并向服务器的屏幕打印 “hello socket”

===========================
TCP-CS服务器实现：

	Listen() ――> 用于监听的socket  --- listener

	Accept() ――> 用于通信的socket --- conn

TCP-CS客户端实现：

	Dial() ――> 用于通信的socket --- conn

===========================

TCP-CS并发服务器：

	1. 创建用于监听的 socket ―― net.Listen()  ---> listener (socket)

	2. 循环 Accept 阻塞监听 客户端 连接请求  --- 有客户连接上来，解除阻塞

	3. 创建一个用于 通信的 go程，同时将用于通信的 socket 传入。

	4. 在各自的go程中：读、写 客户端数据。

		toUpper() ――> 将参数字符串中的小写字符转换为 大写字符。

		获取客户端的  Addr ： conn.RemoteAddr()

		判断客户端关闭：	Read 返回值。 ――  0 

		nc 工具中，发送“exit” 实际 发送的是 ：exit\n

TCP-CS并发客户端：

	0. 创建用于通信的 socket --- conn = net.Dail()

	1.  接收 用户的键盘输入 

		n, os.Stdin.Read(buf) ―― > 从键盘获取用户输入的带有“空格”的数据（ Scan 函数 不能获取带空格数据 ）

	2.  将接收的数据发送给服务器。 ---- go程

		conn.Write(buf[:n])

	3.  读取服务器回发的 应答数据。---- go程

		conn.Read(buf2)

		程序使用 “cmd”测试时，发送“exit”实际发送的是：exit\r\n

		

		














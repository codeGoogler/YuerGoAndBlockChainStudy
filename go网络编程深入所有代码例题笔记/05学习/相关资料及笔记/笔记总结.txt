
select：	是一个关键字。 监听 channel 上的数据流动（可读、可写）。 语法参考 switch case

	1. 每次执行一个 case 分支。

	2. 通常将select 放置到循环当中。

	3. 每一个case 分支，必须是一个 IO 操作。

	4. 如果监听中的case不满足 ―― 当前 case 阻塞。

	5. 如果监听中的case同时有多个满足， select 选择任意一个来执行。

	6. select 语法中的 default 是在所有case不满足情况下，设置的默认处理动作。 通常不设置，防止忙轮询，消耗系统资源。

	7. break 只能跳出一个 case 。不能跳出 select 外面的 for 

斐波那契数列：

	1     1     2     3     5     8     13     21     34     55     89 ...

	x, y = y, x+y


select 超时退出：

	使用 select 的一个 case 监听 <-time.After(定时时长)

	其他 case 满足， time.After(定时时长) 的定时计时，会被重置！！！

	<- time.After(定时时长) 所对应的 case 满足，说明 在计时期间，select 监听的 所有其他 case 都没满足监听条件。

	goto 关键字：

		直接跳转到设置的  任意标签位置，继续执行。要求标签不能超出当前 函数。

死锁：
	是 “锁”的一种错误使用状态！！！―― 编程过程中，应“提早”避免。

        常见的死锁：

	1. 同一个goroutine中，使用同一个 channel 读写。

	2. 2个 以上的go程中， 使用同一个 channel 通信。 读写channel 先于 go程创建。

	3. 2个以上的go程中，使用多个 channel 通信。 A go 程 获取channel 1 的同时，尝试使用channel 2， 同一时刻，

					    B go 程 获取channel 2 的同时，尝试使用channel 1

	4. 在go语言中， channel 和 读写锁、互斥锁 尽量避免交叉混用。――“隐形死锁”。如果必须使用。推荐借助“条件变量”

互斥锁：
	访问共享数据之前，加锁，加锁成功后再对共享资源进行访问。 共享数据访问结束，立即解锁。

	没有加锁成功，阻塞在锁上。

	var mutex sync.Mutex  结构体类型。

		mutex.lock() 	加锁

		mutex.unlock()	解锁。	


读写锁：
	读共享、写独占。 写锁优先级高。

	对共享数据的保护。―― 防止出现数据混淆。 读操作，不会对共享数据进行修改。因此多个go程同时读，不会出现数据混乱。

	一个读写锁， 有两种属性 r、w。 加锁锁定共享数据时，要指定 加锁属性。 

	var RWmutex sync.RWMutex
	
		RWmutex.Lock()	―― 写模式加锁

		RWmutex.UnLock()	―― 写模式解锁

		RWmutex.RLock()	―― 读模式加锁

		RWmutex.RUnLock()	―― 读模式解锁

条件变量：
	本身不是锁！！！通常结合锁一同使用。

	type  Cond struct {
		。。。
		L Locker
		。。。
	}

        使用流程：

	1.  创建 Cond 条件变量

	2.  初始化条件变量 Cond.L := new(sync.Mutex)

	3.  生产者：
	
		1） 对条件变量内部锁，加锁。 Cond.L.lock()

		2)   判断 是否应该阻塞 等待条件变量满足

			for （len(ch）== 缓冲区容量） {
				Cond.wait()  			1. 阻塞	2. 解锁	--- 等待被唤醒---   3.加锁 
			}

			结论：判断 wait 是否调用的条件，在多生产者、消费者模型中，一定要使用 for 

		3） 向公共区写入数据

		4） 解锁  Cond.L.Unlock()

		5） 唤醒阻塞在条件变量上的 对端 ―― 消费者

			Cond.signal()			---- broadcast	
	3.  消费者：
	
		1） 对条件变量内部锁，加锁。 Cond.L.lock()

		2)   判断 是否应该阻塞 等待条件变量满足

			for（len(ch）== 0） {
				Cond.wait()  			1. 阻塞	2. 解锁	--- 等待被唤醒---   3.加锁 
			}

			结论：判断 wait 是否调用的条件，在多生产者、消费者模型中，一定要使用 for 

		3） 从公共区读出数据

		4） 解锁  Cond.L.Unlock()

		5） 唤醒阻塞在条件变量上的 对端 ―― 生产者

			Cond.signal()
	



























	


	

	